[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "The sizes that the window can have.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total screen's size.  \nMake sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers.",
        "stripped_doc" : [
          "The sizes that the window can have.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total screen's size.  ",
          "Make sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers."
        ],
        "def" : "MiroWindowsManager.sizes",
        "name" : "sizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.sizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have.",
        "parameters" : [

        ]
      },
      {
        "doc" : "The sizes that the window can have in full-screen.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4 and 1\/2 of the total screen's size.  \nMake sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers.\nUse 'c' for the original size and shape of the window before starting to move it.",
        "stripped_doc" : [
          "The sizes that the window can have in full-screen.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4 and 1\/2 of the total screen's size.  ",
          "Make sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers.",
          "Use 'c' for the original size and shape of the window before starting to move it."
        ],
        "def" : "MiroWindowsManager.fullScreenSizes",
        "name" : "fullScreenSizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.fullScreenSizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have in full-screen.",
        "parameters" : [

        ]
      },
      {
        "doc" : "The screen's grid size.  \nMake sure that the numbers in MiroWindowsManager.sizes and MiroWindowsManager.fullScreenSizes divide h and w to give integers.",
        "stripped_doc" : [
          "The screen's grid size.  ",
          "Make sure that the numbers in MiroWindowsManager.sizes and MiroWindowsManager.fullScreenSizes divide h and w to give integers."
        ],
        "def" : "MiroWindowsManager.GRID",
        "name" : "GRID",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.GRID",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The screen's grid size.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Boolean value to decide whether or not to move the window on the next screen if the window is moved the screen edge.",
        "stripped_doc" : [
          "Boolean value to decide whether or not to move the window on the next screen if the window is moved the screen edge."
        ],
        "def" : "MiroWindowsManager.pushToNextScreen",
        "name" : "pushToNextScreen",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.pushToNextScreen",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Boolean value to decide whether or not to move the window on the next screen if the window is moved the screen edge.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Boolean value to decide whether or not to stick the window to the edge of the screen if shrinking it would detatch it from the screen edge.",
        "stripped_doc" : [
          "Boolean value to decide whether or not to stick the window to the edge of the screen if shrinking it would detatch it from the screen edge."
        ],
        "def" : "MiroWindowsManager.stickySides",
        "name" : "stickySides",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.stickySides",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Boolean value to decide whether or not to stick the window to the edge of the screen if shrinking it would detatch it from the screen edge.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Float value to decide the rate at which to resize windows. A value of 1.05 means that the window is made taller\/wider (or shorter\/thinner) in 5% increments.",
        "stripped_doc" : [
          "Float value to decide the rate at which to resize windows. A value of 1.05 means that the window is made taller\/wider (or shorter\/thinner) in 5% increments."
        ],
        "def" : "MiroWindowsManager.resizeRate",
        "name" : "resizeRate",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.resizeRate",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Float value to decide the rate at which to resize windows. A value of 1.05 means that the window is made taller\/wider (or shorter\/thinner) in 5% increments.",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "With this Spoon you will be able to move the window in halves and in corners using your keyboard and mainly using arrows. You would also be able to resize them by thirds, quarters, or halves.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "With this Spoon you will be able to move the window in halves and in corners using your keyboard and mainly using arrows. You would also be able to resize them by thirds, quarters, or halves.  \nOfficial homepage for more info and documentation:\n[https:\/\/github.com\/miromannino\/miro-windows-manager](https:\/\/github.com\/miromannino\/miro-windows-manager)\n\nNOTE: This Spoon sets `hs.grid` globals with `hs.grid.setGrid()`, `hs.grid.MARGINX`, and `hs.grid.MARGINY`.\nChanging MiroWindowsManager.GRID will change these globals.\n\nDownload:\nhttps:\/\/github.com\/miromannino\/miro-windows-manager\/raw\/master\/MiroWindowsManager.spoon.zip",
    "Method" : [
      {
        "doc" : "Move the frontmost window up, down, left, right.  \n\nParameters:\n * side - 'up', 'down', 'left', or 'right'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move the frontmost window up, down, left, right.  ",
          ""
        ],
        "def" : "MiroWindowsManager:move(side)",
        "name" : "move",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:move(side)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move the frontmost window up, down, left, right.",
        "parameters" : [
          " * side - 'up', 'down', 'left', or 'right'",
          ""
        ]
      },
      {
        "doc" : "Resize the frontmost window taller, shorter, wider, or thinner.\n\nParameters:\n * growth - 'taller', 'shorter', 'wider', or 'thinner'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Resize the frontmost window taller, shorter, wider, or thinner.",
          ""
        ],
        "def" : "MiroWindowsManager:resize(growth)",
        "name" : "resize",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:resize(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Resize the frontmost window taller, shorter, wider, or thinner.",
        "parameters" : [
          " * growth - 'taller', 'shorter', 'wider', or 'thinner'",
          ""
        ]
      },
      {
        "doc" : "Grow the frontmost window to full width \/ height.\n\nParameters:\n * dimension - 'h', or 'w'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Grow the frontmost window to full width \/ height.",
          ""
        ],
        "def" : "MiroWindowsManager:growFully(growth)",
        "name" : "growFully",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:growFully(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Grow the frontmost window to full width \/ height.",
        "parameters" : [
          " * dimension - 'h', or 'w'",
          ""
        ]
      },
      {
        "doc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.  \nTap both directions to go full width \/ height.  \n\nParameters:\n * move - 'up', 'down', 'left', or 'right'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move to screen edge, or cycle to next horizontal or vertical size if already there.  ",
          "Tap both directions to go full width \/ height.  ",
          ""
        ],
        "def" : "MiroWindowsManager:go(move)",
        "name" : "go",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:go(move)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.",
        "parameters" : [
          " * move - 'up', 'down', 'left', or 'right'",
          ""
        ]
      },
      {
        "doc" : "Fullscreen, or cycle to next fullscreen option\n\nParameters:\n * None.\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Fullscreen, or cycle to next fullscreen option",
          ""
        ],
        "def" : "MiroWindowsManager:fullscreen()",
        "name" : "fullscreen",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:fullscreen()",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Fullscreen, or cycle to next fullscreen option",
        "parameters" : [
          " * None.",
          ""
        ]
      },
      {
        "doc" : "Center\n\nParameters:\n * None.\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Center",
          ""
        ],
        "def" : "MiroWindowsManager:center()",
        "name" : "center",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:center()",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Center",
        "parameters" : [
          " * None.",
          ""
        ]
      },
      {
        "doc" : "Binds hotkeys for Miro's Windows Manager\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * left: for the left action (usually `{hyper, \"left\"}`)\n  * right: for the right action (usually `{hyper, \"right\"}`)\n  * up: for the up action (usually {hyper, \"up\"})\n  * down: for the down action (usually `{hyper, \"down\"}`)\n  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)\n  * center: for the center action (e.g. `{hyper, \"c\"}`)\n  * move: for the move action (e.g. `{hyper, \"v\"}`). The move action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above). \n  * resize: for the resize action (e.g. `{hyper, \"d\"}`). The resize action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above).\n\nA configuration example:\n``` lua\nlocal hyper = {\"ctrl\", \"alt\", \"cmd\"}\nspoon.MiroWindowsManager:bindHotkeys({\n  up          = {hyper, \"up\"},\n  down        = {hyper, \"down\"},\n  left        = {hyper, \"left\"},\n  right       = {hyper, \"right\"},\n  fullscreen  = {hyper, \"f\"},\n  center      = {hyper, \"c\"},\n  move        = {hyper, \"v\"},\n  resize      = {hyper, \"d\" }\n})\n```\n\nIn this example ctrl+alt+cmd+up will perform the 'up' action.\nPressing ctrl+alt+cmd+c the window will be centered.\nPressing ctrl+alt+cmd+f the window will be maximized.\nKeeping ctrl+alt+cmd+v pressed you can move the window using the arrow keys up, down, left, and right.\nKeeping ctrl+alt+cmd+d pressed you can resize the window using the arrow keys up, down, left, and right.",
        "stripped_doc" : [
          "Binds hotkeys for Miro's Windows Manager",
          ""
        ],
        "def" : "MiroWindowsManager:bindHotkeys()",
        "name" : "bindHotkeys",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:bindHotkeys()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for Miro's Windows Manager",
        "parameters" : [
          " * mapping - A table containing hotkey details for the following items:",
          "  * left: for the left action (usually `{hyper, \"left\"}`)",
          "  * right: for the right action (usually `{hyper, \"right\"}`)",
          "  * up: for the up action (usually {hyper, \"up\"})",
          "  * down: for the down action (usually `{hyper, \"down\"}`)",
          "  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)",
          "  * center: for the center action (e.g. `{hyper, \"c\"}`)",
          "  * move: for the move action (e.g. `{hyper, \"v\"}`). The move action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above). ",
          "  * resize: for the resize action (e.g. `{hyper, \"d\"}`). The resize action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above).",
          "",
          "A configuration example:",
          "``` lua",
          "local hyper = {\"ctrl\", \"alt\", \"cmd\"}",
          "spoon.MiroWindowsManager:bindHotkeys({",
          "  up          = {hyper, \"up\"},",
          "  down        = {hyper, \"down\"},",
          "  left        = {hyper, \"left\"},",
          "  right       = {hyper, \"right\"},",
          "  fullscreen  = {hyper, \"f\"},",
          "  center      = {hyper, \"c\"},",
          "  move        = {hyper, \"v\"},",
          "  resize      = {hyper, \"d\" }",
          "})",
          "```",
          "",
          "In this example ctrl+alt+cmd+up will perform the 'up' action.",
          "Pressing ctrl+alt+cmd+c the window will be centered.",
          "Pressing ctrl+alt+cmd+f the window will be maximized.",
          "Keeping ctrl+alt+cmd+v pressed you can move the window using the arrow keys up, down, left, and right.",
          "Keeping ctrl+alt+cmd+d pressed you can resize the window using the arrow keys up, down, left, and right."
        ]
      },
      {
        "doc" : "Currently does nothing (implemented so that treating this Spoon like others won't cause errors).",
        "stripped_doc" : [
          "Currently does nothing (implemented so that treating this Spoon like others won't cause errors)."
        ],
        "def" : "MiroWindowsManager:init()",
        "name" : "init",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:init()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Currently does nothing (implemented so that treating this Spoon like others won't cause errors).",
        "parameters" : [

        ]
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "The screen's grid size.  \nMake sure that the numbers in MiroWindowsManager.sizes and MiroWindowsManager.fullScreenSizes divide h and w to give integers.",
        "stripped_doc" : [
          "The screen's grid size.  ",
          "Make sure that the numbers in MiroWindowsManager.sizes and MiroWindowsManager.fullScreenSizes divide h and w to give integers."
        ],
        "def" : "MiroWindowsManager.GRID",
        "name" : "GRID",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.GRID",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The screen's grid size.",
        "parameters" : [

        ]
      },
      {
        "doc" : "The sizes that the window can have in full-screen.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4 and 1\/2 of the total screen's size.  \nMake sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers.\nUse 'c' for the original size and shape of the window before starting to move it.",
        "stripped_doc" : [
          "The sizes that the window can have in full-screen.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4 and 1\/2 of the total screen's size.  ",
          "Make sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers.",
          "Use 'c' for the original size and shape of the window before starting to move it."
        ],
        "def" : "MiroWindowsManager.fullScreenSizes",
        "name" : "fullScreenSizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.fullScreenSizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have in full-screen.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Boolean value to decide whether or not to move the window on the next screen if the window is moved the screen edge.",
        "stripped_doc" : [
          "Boolean value to decide whether or not to move the window on the next screen if the window is moved the screen edge."
        ],
        "def" : "MiroWindowsManager.pushToNextScreen",
        "name" : "pushToNextScreen",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.pushToNextScreen",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Boolean value to decide whether or not to move the window on the next screen if the window is moved the screen edge.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Float value to decide the rate at which to resize windows. A value of 1.05 means that the window is made taller\/wider (or shorter\/thinner) in 5% increments.",
        "stripped_doc" : [
          "Float value to decide the rate at which to resize windows. A value of 1.05 means that the window is made taller\/wider (or shorter\/thinner) in 5% increments."
        ],
        "def" : "MiroWindowsManager.resizeRate",
        "name" : "resizeRate",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.resizeRate",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Float value to decide the rate at which to resize windows. A value of 1.05 means that the window is made taller\/wider (or shorter\/thinner) in 5% increments.",
        "parameters" : [

        ]
      },
      {
        "doc" : "The sizes that the window can have.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total screen's size.  \nMake sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers.",
        "stripped_doc" : [
          "The sizes that the window can have.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total screen's size.  ",
          "Make sure that these numbers divide both dimensions of MiroWindowsManager.GRID to give integers."
        ],
        "def" : "MiroWindowsManager.sizes",
        "name" : "sizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.sizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Boolean value to decide whether or not to stick the window to the edge of the screen if shrinking it would detatch it from the screen edge.",
        "stripped_doc" : [
          "Boolean value to decide whether or not to stick the window to the edge of the screen if shrinking it would detatch it from the screen edge."
        ],
        "def" : "MiroWindowsManager.stickySides",
        "name" : "stickySides",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.stickySides",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Boolean value to decide whether or not to stick the window to the edge of the screen if shrinking it would detatch it from the screen edge.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Binds hotkeys for Miro's Windows Manager\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * left: for the left action (usually `{hyper, \"left\"}`)\n  * right: for the right action (usually `{hyper, \"right\"}`)\n  * up: for the up action (usually {hyper, \"up\"})\n  * down: for the down action (usually `{hyper, \"down\"}`)\n  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)\n  * center: for the center action (e.g. `{hyper, \"c\"}`)\n  * move: for the move action (e.g. `{hyper, \"v\"}`). The move action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above). \n  * resize: for the resize action (e.g. `{hyper, \"d\"}`). The resize action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above).\n\nA configuration example:\n``` lua\nlocal hyper = {\"ctrl\", \"alt\", \"cmd\"}\nspoon.MiroWindowsManager:bindHotkeys({\n  up          = {hyper, \"up\"},\n  down        = {hyper, \"down\"},\n  left        = {hyper, \"left\"},\n  right       = {hyper, \"right\"},\n  fullscreen  = {hyper, \"f\"},\n  center      = {hyper, \"c\"},\n  move        = {hyper, \"v\"},\n  resize      = {hyper, \"d\" }\n})\n```\n\nIn this example ctrl+alt+cmd+up will perform the 'up' action.\nPressing ctrl+alt+cmd+c the window will be centered.\nPressing ctrl+alt+cmd+f the window will be maximized.\nKeeping ctrl+alt+cmd+v pressed you can move the window using the arrow keys up, down, left, and right.\nKeeping ctrl+alt+cmd+d pressed you can resize the window using the arrow keys up, down, left, and right.",
        "stripped_doc" : [
          "Binds hotkeys for Miro's Windows Manager",
          ""
        ],
        "def" : "MiroWindowsManager:bindHotkeys()",
        "name" : "bindHotkeys",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:bindHotkeys()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for Miro's Windows Manager",
        "parameters" : [
          " * mapping - A table containing hotkey details for the following items:",
          "  * left: for the left action (usually `{hyper, \"left\"}`)",
          "  * right: for the right action (usually `{hyper, \"right\"}`)",
          "  * up: for the up action (usually {hyper, \"up\"})",
          "  * down: for the down action (usually `{hyper, \"down\"}`)",
          "  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)",
          "  * center: for the center action (e.g. `{hyper, \"c\"}`)",
          "  * move: for the move action (e.g. `{hyper, \"v\"}`). The move action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above). ",
          "  * resize: for the resize action (e.g. `{hyper, \"d\"}`). The resize action is active as soon as the hotkey is pressed. While active the left, right, up or down keys can be used (these are configured by the actions above).",
          "",
          "A configuration example:",
          "``` lua",
          "local hyper = {\"ctrl\", \"alt\", \"cmd\"}",
          "spoon.MiroWindowsManager:bindHotkeys({",
          "  up          = {hyper, \"up\"},",
          "  down        = {hyper, \"down\"},",
          "  left        = {hyper, \"left\"},",
          "  right       = {hyper, \"right\"},",
          "  fullscreen  = {hyper, \"f\"},",
          "  center      = {hyper, \"c\"},",
          "  move        = {hyper, \"v\"},",
          "  resize      = {hyper, \"d\" }",
          "})",
          "```",
          "",
          "In this example ctrl+alt+cmd+up will perform the 'up' action.",
          "Pressing ctrl+alt+cmd+c the window will be centered.",
          "Pressing ctrl+alt+cmd+f the window will be maximized.",
          "Keeping ctrl+alt+cmd+v pressed you can move the window using the arrow keys up, down, left, and right.",
          "Keeping ctrl+alt+cmd+d pressed you can resize the window using the arrow keys up, down, left, and right."
        ]
      },
      {
        "doc" : "Center\n\nParameters:\n * None.\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Center",
          ""
        ],
        "def" : "MiroWindowsManager:center()",
        "name" : "center",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:center()",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Center",
        "parameters" : [
          " * None.",
          ""
        ]
      },
      {
        "doc" : "Fullscreen, or cycle to next fullscreen option\n\nParameters:\n * None.\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Fullscreen, or cycle to next fullscreen option",
          ""
        ],
        "def" : "MiroWindowsManager:fullscreen()",
        "name" : "fullscreen",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:fullscreen()",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Fullscreen, or cycle to next fullscreen option",
        "parameters" : [
          " * None.",
          ""
        ]
      },
      {
        "doc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.  \nTap both directions to go full width \/ height.  \n\nParameters:\n * move - 'up', 'down', 'left', or 'right'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move to screen edge, or cycle to next horizontal or vertical size if already there.  ",
          "Tap both directions to go full width \/ height.  ",
          ""
        ],
        "def" : "MiroWindowsManager:go(move)",
        "name" : "go",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:go(move)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.",
        "parameters" : [
          " * move - 'up', 'down', 'left', or 'right'",
          ""
        ]
      },
      {
        "doc" : "Grow the frontmost window to full width \/ height.\n\nParameters:\n * dimension - 'h', or 'w'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Grow the frontmost window to full width \/ height.",
          ""
        ],
        "def" : "MiroWindowsManager:growFully(growth)",
        "name" : "growFully",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:growFully(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Grow the frontmost window to full width \/ height.",
        "parameters" : [
          " * dimension - 'h', or 'w'",
          ""
        ]
      },
      {
        "doc" : "Currently does nothing (implemented so that treating this Spoon like others won't cause errors).",
        "stripped_doc" : [
          "Currently does nothing (implemented so that treating this Spoon like others won't cause errors)."
        ],
        "def" : "MiroWindowsManager:init()",
        "name" : "init",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:init()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Currently does nothing (implemented so that treating this Spoon like others won't cause errors).",
        "parameters" : [

        ]
      },
      {
        "doc" : "Move the frontmost window up, down, left, right.  \n\nParameters:\n * side - 'up', 'down', 'left', or 'right'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move the frontmost window up, down, left, right.  ",
          ""
        ],
        "def" : "MiroWindowsManager:move(side)",
        "name" : "move",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:move(side)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move the frontmost window up, down, left, right.",
        "parameters" : [
          " * side - 'up', 'down', 'left', or 'right'",
          ""
        ]
      },
      {
        "doc" : "Resize the frontmost window taller, shorter, wider, or thinner.\n\nParameters:\n * growth - 'taller', 'shorter', 'wider', or 'thinner'\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Resize the frontmost window taller, shorter, wider, or thinner.",
          ""
        ],
        "def" : "MiroWindowsManager:resize(growth)",
        "name" : "resize",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:resize(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Resize the frontmost window taller, shorter, wider, or thinner.",
        "parameters" : [
          " * growth - 'taller', 'shorter', 'wider', or 'thinner'",
          ""
        ]
      }
    ],
    "Field" : [

    ],
    "name" : "MiroWindowsManager"
  }
]